{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actializarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","prototype","PropTypes","func","isRequired","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevascitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20dacc65.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    //CREAR STATE DE CITAS\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario:'',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n\r\n    });\r\n\r\n    const [error,actializarError] = useState(false)\r\n\r\n    //Funcion que se ejecuta cuando un usuario escribe en un input\r\n    const actualizarState = e =>{\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    //extraer los valoles con destructurin\r\n    const {mascota,propietario,fecha,hora,sintomas} = cita;\r\n\r\n    //Cuando el usuario precina en agregar cita así se envian los datos por el metodo get osea que se miran los valores en la barra de navegacion\r\n    const submitCita = (e) =>\r\n    {\r\n        e.preventDefault();\r\n        \r\n        //validar\r\n        if(mascota.trim()==='' || propietario.trim()==='' || fecha.trim()==='' || hora.trim()=== ''|| sintomas.trim()==='')  //esto hace que el string aunque tenga espacios en blanco los va a aliminar\r\n        {\r\n            actializarError(true);\r\n            return;\r\n        }  \r\n        //eliminar el mensaje previo\r\n        actializarError(false);\r\n\r\n        //asignar un id, ya que para react cada usestated debes de tener un id unico por lo que instalamos una libreria npm i uuid\r\n        cita.id = uuidv4();\r\n        \r\n\r\n        //crear la cita\r\n        crearCita(cita);\r\n\r\n        //reiniciar el fomr\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario:'',\r\n            fecha:'',\r\n            hora:'',\r\n            sintomas:''\r\n        })\r\n    }\r\n\r\n    return (  \r\n    <Fragment>\r\n        <h2>Crear Cita</h2>\r\n        \r\n        {error?  <p className=\"alerta-error\">Todos los campos son obligatorios</p> :  null}\r\n        \r\n        \r\n\r\n        <form\r\n            onSubmit={submitCita}\r\n        >\r\n            <label>Nombre de Mascota</label>\r\n            <input\r\n                type='text'\r\n                name='mascota'\r\n                className='u-full-width'\r\n                placeholder='Nombre de tu Mascota'\r\n                onChange={actualizarState}\r\n                value={mascota}\r\n            />\r\n\r\n            <label>Nombre Dueño</label>\r\n            <input\r\n                type='text'\r\n                name='propietario'\r\n                className='u-full-width'\r\n                placeholder='Nombre del dieño de la mascota'\r\n                onChange={actualizarState}\r\n                value={propietario}\r\n            />\r\n\r\n            <label>Fecha</label>\r\n            <input\r\n                type='date'\r\n                name='fecha'\r\n                className='u-full-width'\r\n                onChange={actualizarState}\r\n                value={fecha}\r\n            />\r\n\r\n            <label>Fecha</label>\r\n            <input\r\n                type='time'\r\n                name='hora'\r\n                className='u-full-width'\r\n                onChange={actualizarState}\r\n                value={hora}\r\n            />\r\n\r\n            <label>Sintomas</label>\r\n            <textarea\r\n                className =\"u-full-width\"\r\n                name='sintomas'\r\n                onChange={actualizarState}\r\n                value={sintomas}\r\n            ></textarea>\r\n\r\n            <button\r\n                type=\"submit\"\r\n                className=\"u-full-width button-primary\"\r\n            >Agregar Cita</button>\r\n        </form>\r\n    </Fragment>\r\n    );\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\n\r\nconst Cita = ({cita,eliminarCita}) => (\r\n    <div className='cita'>\r\n        <p>Mascota:<span>{cita.mascota}</span></p>\r\n        <p>Dueño:<span>{cita.propietario}</span></p>\r\n        <p>Mascota:<span>{cita.fecha}</span></p>\r\n        <p>Mascota:<span>{cita.hora}</span></p>\r\n\r\n        <button\r\n            className='button eliminar u-full-width'\r\n            onClick={() => eliminarCita(cita.id)}\r\n        >\r\n            Eliminar &times;\r\n        </button>\r\n    </div>\r\n)\r\n \r\nexport default Cita;","import React , {Fragment,useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\nimport PropTypes from 'prop-types';\n\nfunction App() {\n\n  //citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas')); // como va a ser un arreglo lo parseamos a json para que se vuelva un string\n\n  if(!citasIniciales)\n  {\n    citasIniciales=[];\n  }\n\n  //Arreglo de las sitas ya hechas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  // useeffect para realizar ciertas operaciones para cuando el state cambie\n  useEffect(() => { //siempre es un arrow function y es como un document.contentload, tambien cuando se actualiza algo \n    if(citasIniciales){\n      localStorage.setItem('citas',JSON.stringify(citas))\n    }else{\n      localStorage.setItem('citas',JSON.stringify([]));\n    }\n  },[citas,citasIniciales]); //para que no se use siempre se pode esos corchetes y de esa manera no se va a ciclar con una api\n  //le pasamos la dependencia de cita para actualizar cuando haya un cambio en  nuestro  state de cita\n\n\n  //funcion que elimina una cita por su i\n  const eliminarCita = (id) =>{\n    const nuevascitas = citas.filter( cita =>cita.id !== id);\n    guardarCitas(nuevascitas);\n  }\n\n  //funcion que tome las citas actuales y tome la nueva\n  const CrearCita = cita => {\n    guardarCitas([\n      ...citas, // sacar una copia de todas las citas anteriores para poder añadir una nueva y que no modifique todo\n      cita\n    ]);\n  }\n\n  //mensaje condicional\n  const titulo=citas.length === 0? 'No hay citas' : 'Administra tus citas';\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n\n      <div className='container'>\n\n        <div className= 'row'>\n          <div className='one-half column'>\n            <Formulario\n            crearCita= {CrearCita}/>\n          </div>\n          <div className='one-half column'>\n            \n              <h2>{titulo}</h2>\n              {citas.map(cita =>( // es como un forech de las citas que ya hicimos solo que en este caso vamos a crear un componente nuevo\n                <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}/>\n               ))}\n          </div>\n        </div>\n\n      </div>\n    </Fragment>\n  );\n}\n\nFormulario.prototype = {\n  crearCita: PropTypes.func.isRequired\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}